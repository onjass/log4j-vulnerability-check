import subprocess
import argparse
import requests

def get_args():
    str_description="Check for the vulerable log4j JARs in your system"
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description=str_description)
    parser.add_argument('-l', '--local_hashes_file', help = 'A local file that contains the hashes', required = False)
    parser.add_argument('-o', '--online_hashes_file', help = 'An online resource that contains the hashes', required = False)
    
def get_vulnerable_hashes_from_file(file_path)
    vulnerabl_hashes_file = "file_path"
    with open(hash_file) as file:
        data = file.read() 
    return data
    
def find_and_hash():
    cmd = "find / -name *log4j*jar -print 2>/dev/null -exec md5sum {} \;"
    result = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT).communicate()[0]
    return result.decode('UTF-8').splitlines()

if __name__ == "__main__":
    
    vulnerable_jars = []
    DEFAULT_HASHES = "https://raw.githubusercontent.com/slrbl/CVE-2021-44228-Log4Shell-Hashes/main/md5sum.txt"
    
    args = get_args()
    
    try:
        if args.local_hashes_file != None:
            vulnerable_hashes = get_vulnerable_hashes_from_file(args.local_hashes_file)
        else:
            if args.online_hashes_file != None:
                vulnerable_hashes = requests.get(online_hashes_file).text
            else:
                vulnerable_hashes = requests.get(DEFAULT_HASHES).text
    except:
        print("Something wet wrong getting the vulnerable hashes data")
        sys.exit(1)
        
    for file_hash in find_and_hash():
        file_hash = str(file_hash)
        elems = file_hash.split(' ')
        if len(elems) > 1:
            file_name = elems[2]
            hash_value = str(elems[0])
            print (file_name)
            print(hash_value)
            #hash_value = "152ecb3ce094ac5bc9ea39d6122e2814"
            if hash_value in vulnerable_hashes:
                vulnerable_jars.append([hash_value,file_name])
                
if len(vulnerable_jars) > 0:                
    print ("Here is the list of your vulnerable log4j:")
    for vuln in vulnerable_jars:
        print vuln
else:
    print("No vulnerable log4j found.")
